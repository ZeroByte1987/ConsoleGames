namespace ZConsole.LowLevel
{
	using System;

	/// <summary>
    /// Control signals received by the console control handler.
    /// </summary>
	public enum			ConsoleControlEventType
	{
        /// <summary>
        /// A CTRL+C signal was received, either from keyboard input or from a
        /// signal generated by the GenerateConsoleCtrlEvent function.
        /// </summary>
		CtrlC = 0,
        /// <summary>
        /// A CTRL+BREAK signal was received, either from keyboard input or from
        /// a signal generated by GenerateConsoleCtrlEvent.
        /// </summary>
		CtrlBreak = 1,
        /// <summary>
        /// A signal that the system sends to all processes attached to a console
        /// when the user closes the console (either by clicking Close on the console
        /// window's window menu, or by clicking the End Task button command from
        /// Task Manager).
        /// </summary>
		CtrlClose = 2,
        // 3 and 4 are reserved, per WinCon.h
        /// <summary>
        /// A signal that the system sends to all console processes when a user is logging off. 
        /// </summary>
		CtrlLogoff = 5,
        /// <summary>
        /// A signal that the system sends to all console processes when the system is shutting down. 
        /// </summary>
		CtrlShutdown = 6
    }

    /// <summary>
	/// Console display mode flags used by GetConsoleDisplayMode and SetConsoleDisplayMode.
	/// </summary>
    [Flags]
	public enum			ConsoleDisplayMode
	{
        /// <summary>
        /// Windowed mode.  The documentation erroneously says that windowed mode is value 2.
        /// </summary>
		Windowed = 0,
        /// <summary>
        /// Fullscreen mode.  The console occupies the entire screen.
        /// </summary>
		Fullscreen = 1,
        /// <summary>
        /// Fullscreen mode communicating directly with the video hardware.
        /// This mode is set after the console has made the transition from
        /// windowed mode to fullscreen mode.  Although this flag can be
        /// returned by GetConsoleDisplayMode, you cannot set the flag when
        /// calling SetConsoleDisplayMode.
        /// </summary>
		FullscreenHardware = 2
    }
    
	/// <summary>
	/// Flags that affect the console output mode.  Used by SetConsoleMode and GetConsoleMode.
	/// </summary>
    [Flags]
	public enum			ConsoleOutputModeFlags
	{
        /// <summary>
        /// Characters written to the console or echoed to the console on read
        /// are examined for ASCII control sequences and the correct action is
        /// performed.  Backspace, tab, bell, carriage return, and linefeed
        /// characters are processed.
        /// </summary>
		Processed = 1,
        /// <summary>
        /// When writing characters or echoing input, the cursor moves to the
        /// beginning of the row when it reaches the end of the current row.
        /// </summary>
		WrapAtEol = 2
    }
    
	/// <summary>
    /// Console selection mode flags used when selecting text in the console.
    /// </summary>
	[Flags]
	public enum			ConsoleSelectionFlags
	{
        /// <summary>
        /// There is no current selection
        /// </summary>
		NoSelection = 0,
        /// <summary>
        /// Selection has begun
        /// </summary>
		SelectionInProgress = 1,
        /// <summary>
        /// The selection rectangle is not empty
        /// </summary>
		SelectionNotEmpty = 2,
        /// <summary>
        /// Selecting with the mouse
        /// </summary>
		MouseSelection = 4,
        /// <summary>
        /// Mouse is down
        /// </summary>
		MouseDown = 8
    }
    
	/// <summary>
    /// Console input mode flags used by SetConsoleMode and GetConsoleMode.
    /// </summary>
	[Flags]
	public enum			ConsoleInputModeFlags
	{
        /// <summary>
        /// Control keys are processed by the system.  Ctrl+C generates a
        /// console control event.  If LineInput is also enabled, backspace,
        /// carriage return, and linefeed characters are processed by the system.
        /// </summary>
		ProcessedInput	= 1,
        /// <summary>
        /// Read operations (ReadFile or ReadConsole) return only when a carriage
        /// return character is detected.  If this mode is disabled, the read
        /// functions return when one or more characters are available.
        /// </summary>
		LineInput		= 2,
        /// <summary>
        /// Characters read by the ReadFile or ReadConsole function are written to
        /// the active screen buffer as they are read. This mode can be used only
        /// if the LineInput mode is also enabled.
        /// </summary>
		EchoInput		= 4,
        /// <summary>
        /// User interactions that change the size of the console screen buffer
        /// are reported in the console's input buffer. 
        /// </summary>
		WindowInput		= 8,
        /// <summary>
        /// When enabled, if the mouse pointer is within the borders of the console
        /// window and the window has the keyboard focus, mouse events generated by
        /// mouse movement and button presses are placed in the input buffer.
        /// </summary>
		MouseInput		= 16,
		// To set InsertMode or QuickEditMode, be sure
		// to combine with ExtendedFlags
        /// <summary>
        /// When enabled, text entered in a console window will be inserted at the current
        /// cursor location and all text following that location will not be overwritten.
        /// When disabled, all following text will be overwritten. The ExtendedFlags
        /// mode must be included in order to enable this flag.
        /// </summary>
		InsertMode		= 32,
        /// <summary>
        /// This flag enables the user to use the mouse to select and edit text. To enable
        /// this option, you must also set the ExtendedFlags flag.
        /// </summary>
		QuickEditMode	= 64,
		// ExtendedFlags must be combined with
		// InsertMode and QuickEditMode when setting
        /// <summary>
        /// ExtendedFlags must be enabled in order to enable InsertMode or QuickEditMode.
        /// </summary>
		ExtendedFlags	= 128,
        /// <summary>
        /// Unknown
        /// </summary>
		AutoPosition	= 256
	}
	
	/// <summary>
    /// State of the control keys in a KeyEventRecord.
    /// </summary>
    [Flags]
    public enum			ConsoleControlKeyState
    {
        /// <summary>
        /// Right Alt key is pressed
        /// </summary>
        RightAltPressed = 0x0001,
        /// <summary>
        /// Left Alt key is pressed
        /// </summary>
        LeftAltPressed = 0x0002,
        /// <summary>
        /// Right Ctrl key is pressed
        /// </summary>
        RightCtrlPressed = 0x0004,
        /// <summary>
        /// Left Ctrl key is pressed
        /// </summary>
        LeftCtrlPressed = 0x0008,
        /// <summary>
        /// The shift keys is pressed
        /// </summary>
        ShiftPressed = 0x0010,
        /// <summary>
        /// The number lock light is on
        /// </summary>
        NumLockOn = 0x0020,
        /// <summary>
        /// The scroll lock light is on
        /// </summary>
        ScrollLockOn = 0x0040,
        /// <summary>
        /// The caps lock light is on
        /// </summary>
        CapsLockOn = 0x0080,
        /// <summary>
        /// The key is enhanced
        /// </summary>
        EnhancedKey = 0x0100,
        /// <summary>
        /// DBCS for JPN: SBCS/DBCS mode
        /// </summary>
        NlsDbcsChar = 0x00010000,
        /// <summary>
        /// DBCS for JPN: Alphanumeric mode
        /// </summary>
        NlsAlphanumeric = 0x00000000,
        /// <summary>
        /// DBCS for JPN: Katakana mode
        /// </summary>
        NlsKatakana = 0x00020000,
        /// <summary>
        /// DBCS for JPN: Hiragana mode
        /// </summary>
        NlsHiragana = 0x00040000,
        /// <summary>
        /// DBCS for JPN: Roman/Noroman mode
        /// </summary>
        NlsRoman = 0x00400000,
        /// <summary>
        /// DBCS for JPN: IME conversion
        /// </summary>
        NlsImeConversion = 0x00800000,
        /// <summary>
        /// DBCS for JPN: IME enable/disable
        /// </summary>
        NlsImeDisable = 0x20000000
    }
   
	/// <summary>
    /// A flags enumeration that expresses the state of the mouse buttons.
    /// </summary>
	[Flags]
	public enum			ConsoleMouseButtonState
	{
        /// <summary>
        /// The leftmost mouse button.
        /// </summary>
		LeftButtonPressed = 1,
        /// <summary>
        /// The rightmost mouse button.
        /// </summary>
		RightButtonPressed = 2,
        /// <summary>
        /// The second button from the left
        /// </summary>
		FromLeft2ndMouseButtonPressed = 4,
        /// <summary>
        /// The third button from the left
        /// </summary>
        FromLeft3rdMouseButtonPressed = 8,
        /// <summary>
        /// The fourth button from the left.
        /// </summary>
		FromLeft4thMouseButtonPressed = 16,
        /// <summary>
        /// For mouse wheel events, if this flag is set,
        /// the wheel was scrolled down.  If cleared,
        /// the wheel was scrolled up.
        /// This is not officially documented.
        /// </summary>
        ScrollDown = unchecked((int)0xFF000000)
    }
    
	/// <summary>
    /// Type of mouse event.
    /// </summary>
    [Flags]
	public enum			ConsoleMouseEventType
	{
        /// <summary>
        /// A mouse button was pressed or released
        /// </summary>
        MouseButton = 0,
        /// <summary>
        /// A change in mouse position occurred
        /// </summary>
		MouseMoved = 1,
        /// <summary>
        /// The second click of a double-click operation occurred.
        /// </summary>
		DoubleClick = 2,
        /// <summary>
        /// The vertical mouse wheel was rolled.
        /// </summary>
		MouseWheeled = 4,
        /// <summary>
        /// The horizontal mouse wheel was rolled.
        /// </summary>
        MouseHWheeled = 8
    }
    
	/// <summary>
    /// Console input event types.
    /// </summary>
    [Flags]
	public enum			ConsoleInputEventType
	{
		KeyEvent = 1,
		MouseEvent = 2,
		WindowBufferSizeEvent = 4,
		MenuEvent = 8,
		FocusEvent = 16
    }
}